{"version":3,"sources":["utils/api.jsx","components/addProduct.jsx"],"names":["Ean","this","url","code","Promise","resolve","reject","Axios","post","params","then","res","catch","err","console","log","message","product","headers","AddManually","history","useHistory","useState","setMessage","isSaving","setSaving","status","setStatus","ean","setEan","catId","setCatId","name","setName","catname","setCatname","className","onClick","inverted","color","push","Field","value","onChange","e","target","placeholder","required","icon","preventDefault","api","addProduct","categoryId","categoryName","response","data","type"],"mappings":"4JACMA,E,WACJ,aAAe,oBACbC,KAAKC,IAAM,yC,sDAEHC,GAAO,IAAD,OACd,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAMC,KAAN,UAAc,EAAKN,IAAnB,SAA+B,KAAM,CACnCO,OAAQ,CACNN,KAAMA,KAGPO,MAAK,SAACC,GACLN,EAAQM,MAETC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIG,SAChBV,EAAOO,W,iCAIJI,GAAU,IAAD,OAClB,OAAO,IAAIb,SAAQ,SAACC,EAASC,GAC3BC,IAAMC,KAAN,UAAc,EAAKN,IAAnB,QAA8Be,EAAS,CACrCC,QAAS,CACP,eAAgB,sBAGjBR,MAAK,SAACC,GACLN,EAAQM,MAETC,OAAM,SAACC,GACNP,EAAOO,a,KAKF,QAAIb,G,wJCjCJ,SAASmB,IACtB,IAAIC,EAAUC,cADsB,EAENC,mBAAS,eAFH,mBAE7BN,EAF6B,KAEpBO,EAFoB,OAGND,oBAAS,GAHH,mBAG7BE,EAH6B,KAGnBC,EAHmB,OAIRH,oBAAS,GAJD,mBAI7BI,EAJ6B,KAIrBC,EAJqB,OAKdL,mBAAS,IALK,mBAK7BM,EAL6B,KAKxBC,EALwB,OAMVP,mBAAS,IANC,mBAM7BQ,EAN6B,KAMtBC,EANsB,OAOZT,mBAAS,IAPG,mBAO7BU,EAP6B,KAOvBC,EAPuB,OAQNX,mBAAS,IARH,mBAQ7BY,EAR6B,KAQpBC,EARoB,KAmCpC,OAAIX,EACEE,EAEA,kBAAC,IAAD,KACE,gCAAMV,GACN,yBAAKoB,UAAU,iBACb,kBAAC,IAAD,CACEC,QAAS,WAEPZ,GAAU,GACVE,GAAU,GACVJ,EAAW,KAEbe,UAAQ,EACRC,MAAM,UAEL,IAVH,eAcA,kBAAC,IAAD,CACEF,QAAS,kBAAMjB,EAAQoB,KAAK,UAC5BF,UAAQ,EACRC,MAAM,SAEL,IALH,UAaJ,kBAAC,IAAD,KACE,gCAAMvB,EAAN,MAMN,yBAAKoB,UAAU,UACb,kBAAC,IAAD,CAASA,UAAU,SACjB,kBAAC,IAAD,KACE,kBAAC,IAAKK,MAAN,KACE,sCACA,2BACEC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAOe,EAAEC,OAAOH,QACjCI,YAAY,SAGhB,kBAAC,IAAKL,MAAN,KACE,uCACA,2BACEC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOX,EAAQW,EAAEC,OAAOH,QAClCK,UAAU,EACVD,YAAY,UAGhB,kBAAC,IAAKL,MAAN,KACE,8CACA,2BACEC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAASa,EAAEC,OAAOH,QACnCI,YAAY,iBAGhB,kBAAC,IAAKL,MAAN,KACE,gDACA,2BACEC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAAWS,EAAEC,OAAOH,QACrCK,UAAU,EACVD,YAAY,mBAGhB,kBAAC,IAAD,CACEE,KAAK,QACLT,MAAM,QACNF,QAAS,SAACO,GACRA,EAAEK,iBAxGZC,IACGC,WAAW,CACVvB,MACAwB,WAAYtB,EACZE,OACAqB,aAAcnB,IAEfxB,MAAK,SAACC,GACLY,EAAW,kCACXI,GAAU,MAEXf,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZU,EAAWV,EAAIyC,SAASC,MACxB5B,GAAU,MAEdJ,EAAW,kCACXM,EAAO,IACPE,EAAS,IACTE,EAAQ,IACRE,EAAW,IACXV,GAAU,IAsFF+B,KAAK,UAPP","file":"static/js/7.ed3cc803.chunk.js","sourcesContent":["import Axios from \"axios\";\nclass Ean {\n  constructor() {\n    this.url = \"https://scancbarcode.herokuapp.com/api\";\n  }\n  sendToken(code) {\n    return new Promise((resolve, reject) => {\n      Axios.post(`${this.url}/scan`, null, {\n        params: {\n          code: code,\n        },\n      })\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          console.log(err.message);\n          reject(err);\n        });\n    });\n  }\n  addProduct(product) {\n    return new Promise((resolve, reject) => {\n      Axios.post(`${this.url}/add`, product, {\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      })\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\nexport default new Ean();\n","import React, { useState } from \"react\";\nimport { Segment, Button, Form } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport api from \"../utils/api\";\nexport default function AddManually() {\n  let history = useHistory();\n  const [message, setMessage] = useState(\"Hello World\");\n  const [isSaving, setSaving] = useState(false);\n  const [status, setStatus] = useState(false);\n  const [ean, setEan] = useState(\"\");\n  const [catId, setCatId] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [catname, setCatname] = useState(\"\");\n\n  function save() {\n    // console.log(ean , catId , name, catname)\n    api\n      .addProduct({\n        ean,\n        categoryId: catId,\n        name,\n        categoryName: catname,\n      })\n      .then((res) => {\n        setMessage(\"Successfully Saved to Database\");\n        setStatus(true);\n      })\n      .catch((err) => {\n        console.log(err);\n        setMessage(err.response.data);\n        setStatus(true);\n      });\n    setMessage(\"Saving data to the database...\");\n    setEan(\"\");\n    setCatId(\"\");\n    setName(\"\");\n    setCatname(\"\");\n    setSaving(true);\n  }\n  if (isSaving) {\n    if (status) {\n      return (\n        <Segment>\n          <h2> {message}</h2>\n          <div className='button-button'>\n            <Button\n              onClick={() => {\n                // history.push('/scan')\n                setSaving(false);\n                setStatus(false);\n                setMessage(\"\");\n              }}\n              inverted\n              color='yellow'\n            >\n              {\" \"}\n              Add another\n            </Button>\n\n            <Button\n              onClick={() => history.push(\"/scan\")}\n              inverted\n              color='green'\n            >\n              {\" \"}\n              Scan\n            </Button>\n          </div>\n        </Segment>\n      );\n    } else {\n      return (\n        <Segment>\n          <h2> {message} </h2>\n        </Segment>\n      );\n    }\n  }\n  return (\n    <div className='holder'>\n      <Segment className='hello'>\n        <Form>\n          <Form.Field>\n            <label>Ean</label>\n            <input\n              value={ean}\n              onChange={(e) => setEan(e.target.value)}\n              placeholder='ean'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Name</label>\n            <input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required={true}\n              placeholder='name'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Category Id</label>\n            <input\n              value={catId}\n              onChange={(e) => setCatId(e.target.value)}\n              placeholder='category id'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Category Name</label>\n            <input\n              value={catname}\n              onChange={(e) => setCatname(e.target.value)}\n              required={true}\n              placeholder='category name'\n            />\n          </Form.Field>\n          <Button\n            icon='heart'\n            color='green'\n            onClick={(e) => {\n              e.preventDefault();\n              save();\n            }}\n            type='submit'\n          >\n            Add Entry\n          </Button>\n        </Form>\n      </Segment>\n    </div>\n  );\n}\n"],"sourceRoot":""}