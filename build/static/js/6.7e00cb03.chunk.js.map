{"version":3,"sources":["utils/api.jsx","components/scanner.jsx","components/scanCode.jsx"],"names":["Ean","this","url","code","Promise","resolve","reject","Axios","post","params","then","res","catch","err","console","log","message","product","headers","Scanner","props","onDetected","useEffect","Quagga","init","config","start","stop","onProcessed","result","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","Number","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","line","detected","id","className","Landing","history","useHistory","useState","camera","setCamera","setResult","setMessage","isSaving","setSaving","status","setStatus","Segment","Button","onClick","inverted","push","style","Api","sendToken","data","name","ean","response"],"mappings":"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","file":"static/js/6.7e00cb03.chunk.js","sourcesContent":["import Axios from \"axios\";\nclass Ean {\n  constructor() {\n    this.url = \"https://scancbarcode.herokuapp.com/api\";\n  }\n  sendToken(code) {\n    return new Promise((resolve, reject) => {\n      Axios.post(`${this.url}/scan`, null, {\n        params: {\n          code: code,\n        },\n      })\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          console.log(err.message);\n          reject(err);\n        });\n    });\n  }\n  addProduct(product) {\n    return new Promise((resolve, reject) => {\n      Axios.post(`${this.url}/add`, product, {\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      })\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\nexport default new Ean();\n","import React, { useEffect } from \"react\";\nimport config from \"./scannerConfig.json\";\nimport Quagga from \"quagga\";\n\nconst Scanner = props => {\n  const { onDetected } = props;\n\n  useEffect(() => {\n    Quagga.init(config, err => {\n      if (err) {\n        console.log(err, \"error msg\");\n      }\n      Quagga.start()\n      return () => {\n        Quagga.stop()\n      }\n    });\n\n    //detecting boxes on stream\n    Quagga.onProcessed(result => {\n      var drawingCtx = Quagga.canvas.ctx.overlay,\n        drawingCanvas = Quagga.canvas.dom.overlay;\n\n      if (result) {\n        if (result.boxes) {\n          drawingCtx.clearRect(\n            0,\n            0,\n            Number(drawingCanvas.getAttribute(\"width\")),\n            Number(drawingCanvas.getAttribute(\"height\"))\n          );\n          result.boxes\n            .filter(function(box) {\n              return box !== result.box;\n            })\n            .forEach(function(box) {\n              Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\n                color: \"green\",\n                lineWidth: 2\n              });\n            });\n        }\n\n        if (result.box) {\n          Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\n            color: \"#00F\",\n            lineWidth: 2\n          });\n        }\n\n        if (result.codeResult && result.codeResult.code) {\n          Quagga.ImageDebug.drawPath(\n            result.line,\n            { x: \"x\", y: \"y\" },\n            drawingCtx,\n            { color: \"red\", lineWidth: 3 }\n          );\n        }\n      }\n    });\n\n    Quagga.onDetected(detected);\n  });\n\n  const detected = result => {\n    onDetected(result.codeResult.code);\n  };\n\n  return (\n    // If you do not specify a target,\n    // QuaggaJS would look for an element that matches\n    // the CSS selector #interactive.viewport\n    <div id=\"interactive\" className=\"viewport\" />\n  );\n};\n\nexport default Scanner;\n","import React, { useState } from \"react\";\nimport Scanner from \"./scanner\";\nimport \"../styles/styles.css\";\nimport { Segment , Button } from 'semantic-ui-react'\nimport { useHistory } from \"react-router-dom\";\nimport Api from '../utils/api';\nexport default function Landing() {\n  let history = useHistory();\n  const [camera, setCamera] = useState(true);\n  const [result, setResult] = useState(5707119032506);\n  const [message , setMessage] = useState(\"Hello World\")\n  const [isSaving, setSaving] = useState(false);\n  const [status , setStatus] = useState(false); //completed processing?\n  const onDetected = result => {\n    setResult(result);\n  };\n  \n  function sendToken(){\n    Api.sendToken(result)\n    .then(res=>{\n      // console.log(res.data)\n      setMessage(`Sucessfully Saved to Database with values name: ${res.data.name} , category: ${res.data.ean}`)\n      setStatus(true)\n    })\n    .catch(err=>{\n      // console.log(err.message)\n      if(err.response){\n        setMessage(err.response.data)\n      }else{\n        setMessage(\"Something went wrong\")\n      }\n      setStatus(true)\n    })\n    setSaving(true)\n    setCamera(!camera)\n    setMessage(\"Saving data to the database...\")\n  }\n  if(isSaving){\n\n    if (status){\n      return(\n        <Segment>\n          <h2> {message}</h2>\n            <div className=\"button-button\">\n                <Button onClick={()=>{\n                  // history.push('/scan')\n                  setSaving(false)\n                  setStatus(false)\n                  setCamera(!camera)\n                  setMessage(\"\")\n                }} inverted color= \"green\"> Scan Another</Button>\n                <Button onClick={()=>history.push('/add')} inverted color = \"yellow\"> Add Product</Button>\n            </div>\n          </Segment>\n      )\n    }else{\n      return(\n        <Segment>\n          <h2>  {message} </h2>\n        </Segment>\n      )\n    }\n  }\n  return (\n    <>\n      <div className=\"container\">\n        {camera && <Scanner onDetected={onDetected} />}\n      </div>\n    <Segment >\n\n      <h3> Scanned Code : <span style={{color:\"green\"}}> {result} </span></h3>      \n      <Button inverted color= \"blue\" onClick={() => sendToken()}>\n       Save\n      </Button>\n      <Button onClick={()=>history.push('/add')} inverted color = \"yellow\"> Add Manually</Button>\n    </Segment>\n    </>\n  );\n}\n"],"sourceRoot":""}